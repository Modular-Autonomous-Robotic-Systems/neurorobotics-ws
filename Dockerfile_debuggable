FROM ubuntu:20.04

WORKDIR /skynet_ws

# TODO use alpine linux (more secure and leaner): https://jfrog.com/devops-tools/article/why-use-ubuntu-as-a-docker-base-image-when-alpine-exists/
# But there are some challenges: https://unix.stackexchange.com/questions/593549/can-you-install-ubuntu-or-debian-packages-in-alpine

# Set environment variables to avoid interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update
RUN apt install -y --no-install-recommends software-properties-common
RUN add-apt-repository -y ppa:ubuntu-toolchain-r/test
# should this be added after installing libjasper-dev ?
RUN add-apt-repository -y "deb http://security.ubuntu.com/ubuntu xenial-security main"
# should this be added after installing gfortran ?
RUN add-apt-repository -y ppa:deadsnakes/ppa 

# Install dependencies
#  apt-get update -y
RUN apt install --fix-missing -y --no-install-recommends \
	sudo \
    usbutils \
    # libcanberra-gtk-module \
    libcanberra-gtk3-module \
    udev \
    git \
    gcc-9 \
	g++ \
	libeigen3-dev \
	build-essential \
	cmake \
    unzip \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libjasper-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    python3.6-dev \
    libssl-dev \
    libusb-1.0-0-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglew-dev \
    libyaml-cpp-dev \
    geographiclib-tools \
    libgeographic-dev \
    libspdlog-dev \
    libgtest-dev

# clone opencv
RUN git clone https://github.com/opencv/opencv.git
WORKDIR /skynet_ws/opencv
RUN git checkout 3.4
    
WORKDIR /skynet_ws 

# clone opencv_contrib
RUN git clone https://github.com/opencv/opencv_contrib.git
WORKDIR /skynet_ws/opencv_contrib/
RUN git checkout 3.4

WORKDIR /skynet_ws 

# clone librealsense
RUN git clone https://github.com/IntelRealSense/librealsense.git
WORKDIR /skynet_ws/librealsense
RUN git reset --hard 61cf21520b4bb29c2c1074f7bad74a6cfcd93ca3

WORKDIR /skynet_ws 

# clone pangolin
RUN git config --global advice.detachedHead false
RUN git clone --recursive https://github.com/stevenlovegrove/Pangolin.git -b v0.8

WORKDIR /skynet_ws 

# build opencv
WORKDIR /skynet_ws/opencv 
RUN sudo mkdir -p /skynet_ws/opencv/build
WORKDIR /skynet_ws/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") -D PYTHON3_EXECUTABLE=$(which python3) -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) -D WITH_GTK=ON -D WITH_FFMPEG=ON -D BUILD_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -D INSTALL_PYTHON_EXAMPLES=ON -D HAVE_opencv_python3=ON ..
RUN make -j4
RUN make install

WORKDIR /skynet_ws 

# build librealsense
WORKDIR /skynet_ws/librealsense
RUN chmod +x ./scripts/setup_udev_rules.sh
RUN ./scripts/setup_udev_rules.sh
RUN mkdir build 
WORKDIR /skynet_ws/librealsense/build
RUN cmake ../ -DBUILD_EXAMPLES=true -DFORCE_RSUSB_BACKEND=true
RUN make -j6
RUN make install

WORKDIR /skynet_ws 

# build pangolin
WORKDIR /skynet_ws/Pangolin 
RUN mkdir build 
WORKDIR /skynet_ws/Pangolin/build
RUN cmake ..
RUN make -j6

ENTRYPOINT ["tail", "-f", "/dev/null"]




