#!/bin/bash

VERSION=0.0.1
ROS_VERSION="foxy"
BFT_IP="192.168.26.78"
BFT_PORT="14550"
# Refer to the following link for information about state management in bash using a statefile
# https://stackoverflow.com/questions/63084354/how-to-store-state-between-two-consecutive-runs-of-a-bash-script
statefile="/tmp/djinn_state"
last_run_sitl_env=""

save_state () {
  typeset -p "$@" >"$statefile"
}

# Source the statefile to restore state
. "$statefile" 2>/dev/null || :

# Set save_state call on script exit to automatically persist state
# To be enabled later when multiple states are required
# trap 'save_state last_run_sitl_env' EXIT

iexec(){
            time docker container exec -it "$1" /bin/bash -l -c "$2"
        }

iexec_ros(){
			time docker container exec -it "$1" /bin/bash -l -c "source /opt/ros/${ROS_VERSION}/setup.bash && $2"
        }


		if [[ "$1" == "install" ]]
		then
	scripts/install.sh $2 $3 $4


elif [[ "$1" == "setup" ]]
then
	mkdir -p $PWD/src
	if [[ "$2" == "docker" ]]
	then
		platform="linux/arm64/v8,linux/amd64"
		mode="base"
		echo "$3"
		if [[ -n "$3" ]]
		then
			echo "============ BUILDING Image ============="
			if [[ "$3" == "base" ]]
			then
				echo "============ BUILDING Base Image ============="
				image="skynet/base"
				filepath="skynet-base/"
				container_name="skynet_container"
			elif [[ "$3" == "ros" ]]
			then
				echo "============ BUILDING ROS Image ============="
				image="skynet/ros"
				filepath="skynet-ros/"
				container_name="ros_container"
				mode="ros"
			elif [[ "$3" == "sitl" ]]
			then
				echo "============ BUILDING SITL Image ============="
				image="skynet/base"
				filepath="skynet-base/"
				container_name="sitl_container"
				mode="sitl"
			elif [[ "$3" == "vision-tools" ]]
			then
				echo "============ BUILDING Vision Tools Image ============="
				image="vision-tools/dev"
				filepath="vision-tools/"
				container_name="vision_tools_container"
				mode="vision-tools"
			fi
			# scripts/docker-build.sh $platform $image $filepath 
			if [[ "${mode}" == "sitl" ]]
			then
				scripts/docker-build.sh $platform bfx/test ext/bfx 
			fi
		else
			echo "============ BUILDING Base Image ============="
			image="skynet/base"
			filepath="skynet-base/"
			scripts/docker-build.sh $platform $image $filepath 
			echo "============ BUILDING ROS Image ============="
			image="skynet/ros"
			filepath="skynet-ros/"
			scripts/docker-build.sh $platform $image $filepath 
			container_name="ros_container"
			mode="ros"
		fi
		scripts/start.sh $PWD $container_name $image
		iexec $container_name "ls && echo \"Starting Container Setup\" && /ws/scripts/docker-setup.sh ${mode}" 
	fi


elif [[ "$1" == "init" ]]
then
	mode="ros"
	if [[ -n "$2" ]]
	then
		if [[ "$2" == "vision-tools"  ]]
		then
			scripts/start.sh $PWD vision_tools_container vision-tools/dev
		elif [[ "$2" == "base"  ]]
		then
			echo "=============== Initialising SkyNet Container ================"
			scripts/start.sh $PWD skynet_container skynet/base
			iexec skynet_container "./scripts/build.sh $2"
		elif [[ "$2" == "sitl"  ]]
		then
			echo "=============== Initialising SITL Container ================"
			scripts/start.sh $PWD sitl_container skynet/base
			scripts/start.sh $PWD bfx_container bfx/test
			iexec sitl_container "./scripts/build.sh $2"
			iexec bfx_container "./scripts/build-bfx-deps.sh"
		elif [[ "$2" == "ros"  ]]
		then
			echo "=============== Initialising SkyNet-ROS Container ================"
			scripts/start.sh $PWD ros_container skynet/ros
			iexec_ros ros_container "./scripts/build.sh $2"
		fi
	else
		scripts/start.sh $PWD ros_container skynet/ros
		scripts/start.sh $PWD vision_tools_container vision-tools/dev
		iexec_ros ros_container "./scripts/build.sh && ./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
	fi

elif [[ "$1" == "build" ]]
then	
	clear
	if [[ -z "$2" ]]
	then
		echo "=========== BUILDING SkyNet And Packages ==========="
		iexec_ros ros_container "./scripts/build.sh && ./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
	else
		if [[  "$2" == "skynet" ]]
		then
			echo "=========== BUILDING SkyNet ==========="
			iexec skynet_container "./scripts/build.sh"
		elif [[  "$2" == "skynet-ros" ]]
		then
			echo "=========== BUILDING SkyNet-ROS ==========="
			iexec_ros ros_container "./scripts/build.sh"
		elif [[  "$2" == "ros-packages" ]]
		then
			echo "=========== BUILDING Packages ==========="
			iexec_ros ros_container "./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
		elif [[  "$2" == "sitl" ]]
		then
			echo "=========== BUILDING SITL ==========="
			iexec sitl_container "./scripts/build.sh $2"
		fi
	fi

elif [[  "$1" == "exec" ]]
then
	# djinn exec "cd ros_ws/src/ && ros2 pkg create --build-type ament_cmake Sensors" for creating ros2 packages
	# echo "${2}_container"
	iexec "${2}_container" "$3"

elif [[  "$1" == "start" ]]
then
	# djinn exec "cd ros_ws/src/ && ros2 pkg create --build-type ament_cmake Sensors" for creating ros2 packages
	if [[ "$2" == "airsim" ]]
	then
		if [[ "$3" == "AirSimNH" ]]
		then
			nohup ./envs/AirSimNH/LinuxNoEditor/AirSimNH.sh -renderoffscreen -settings=$(pwd)/config/settings-no-px4.json > airsimnh.log &
		
		elif [[ "$3" == "LandscapeMountain" ]]
		then
			nohup ./envs/LandscapeMountains/LinuxNoEditor/LandscapeMountains.sh -renderoffscreen -settings=$(pwd)/config/settings-no-px4.json > airsimmountain.log &
		elif [[ "$3" == "ZhangJiajie" ]]
		then
			nohup ./envs/ZhangJiajie/LinuxNoEditor/ZhangJiajie.sh -renderoffscreen -settings=$(pwd)/config/settings-no-px4.json > airsimmountain.log &
		elif [[ "$3" == "TrapCam" ]]
		then
			nohup ./envs/TrapCam/LinuxNoEditor/TrapCam.sh -WINDOWED -ResX=640 -ResY=480 -settings=$(pwd)/config/settings-no-px4.json > airsimtrap.log &
		elif [[ "$3" == "Blocks" ]]
		then
			nohup ./envs/LinuxBlocks1.8.1/LinuxNoEditor/Blocks.sh -renderoffscreen -settings=$(pwd)/config/settings-no-px4.json > airsimblocks.log &
		elif [[ "$3" == "Africa" ]]
		then
			echo "Starting Africa"
			nohup ./envs/Africa_Savannah/LinuxNoEditor/Africa_001.sh  -WINDOWED -ResX=640 -ResY=480 -settings=$(pwd)/config/settings-africa.json > airsimafrica.log &
		fi
		sleep 5
		iexec_ros ros_container "cd ros_ws/ && source install/setup.bash && ros2 run airsim_lib talker"
		name="$3"
		if [[ "$3" == "LandscapeMountain"  ]]
		then
			name="LandscapeMounta"
		fi
		ps -ef | grep $name | grep -v grep | awk '{print $2}' | xargs -r kill -9
	elif [[ "$2" == "sensors" ]]
	then
		iexec_ros ros_container "cd ros_ws && source install/setup.bash && ros2 launch sensors sensors_launch.py"
	elif [[ "$2" == "skynet" ]]
	then
		iexec skynet_container "cd SkyNet/build && ./SkyNet"
	elif [[ "$2" == "sitl" ]]
	then
		echo "========== Starting AIRSIM =========="
		if [[ "$3" == "AirSimNH" ]]
		then
			nohup ./envs/AirSimNH/LinuxNoEditor/AirSimNH.sh -renderoffscreen -settings=$(pwd)/config/settings.json > airsimnh.log &
		elif [[ "$3" == "LandscapeMountain" ]]
		then
			nohup ./envs/LandscapeMountains/LinuxNoEditor/LandscapeMountains.sh -WINDOWED -ResX=640 -ResY=480 -settings=$(pwd)/config/settings.json > airsimmountain.log &
		elif [[ "$3" == "ZhangJiajie" ]]
		then
			nohup ./envs/ZhangJiajie/LinuxNoEditor/ZhangJiajie.sh -WINDOWED -ResX=640 -ResY=480 -settings=$(pwd)/config/settings.json > airsimzhang.log &
		elif [[ "$3" == "TrapCam" ]]
		then
			nohup ./envs/TrapCam/LinuxNoEditor/TrapCam.sh -WINDOWED -ResX=640 -ResY=480 -settings=$(pwd)/config/settings-trap.json > airsimtrap.log &
		elif [[ "$3" == "Blocks" ]]
		then
			nohup ./envs/LinuxBlocks1.8.1/LinuxNoEditor/Blocks.sh -renderoffscreen -settings=$(pwd)/config/settings.json > airsimblocks.log &
		elif [[ "$3" == "Africa" ]]
		then
			nohup ./envs/Africa_Savannah/LinuxNoEditor/Africa_001.sh -WINDOWED -ResX=640 -ResY=480  -settings=$(pwd)/config/settings-africa.json >> airsimafrica.log &
		fi
		last_run_sitl_env="$3"
		save_state last_run_sitl_env
		echo "========== Starting BFX =========="
		gnome-terminal -- sh -c "bash -c \"./scripts/run-bfx.sh && exit; exec bash\""
		sleep 5
		echo "========== Starting Mircrortps Agent =========="
		gnome-terminal -- sh -c "bash -c \"./scripts/run-rtps-agent.sh && exit; exec bash\""
		echo "========== Starting SkyNet =========="
		iexec sitl_container "cd /ws/SkyNet/build && ./SkyNet"
		iexec bfx_container "ps -eawf | grep px4 | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		iexec bfx_container "ps -eawf | grep px4-simulator | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		iexec sitl_container "ps -eawf | grep micrortps_agent | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		ps -ef | grep run-bfx.sh | grep -v grep | awk '{print $2}' | xargs -r kill -9
		ps -ef | grep run-rtps-agent.sh | grep -v grep | awk '{print $2}' | xargs -r kill -9
		ps -ef | grep $name | grep -v grep | awk '{print $2}' | xargs -r kill -9
		last_run_sitl_env=""
		save_state last_run_sitl_env
	fi

elif [[ $1 == "kill" ]]
then
	echo "Killing running proceses"
	if [[ "$2" == "sitl" ]]
	then
		echo "Killing SITL processes"
		iexec bfx_container "ps -eawf | grep px4 | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		iexec bfx_container "ps -eawf | grep px4-simulator | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		iexec sitl_container "ps -eawf | grep micrortps_agent | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		ps -ef | grep run-bfx.sh | grep -v grep | awk '{print $2}' | xargs -r kill -9
		ps -eawf | grep run-rtps-agent.sh | grep -v grep | awk '{print $2}' | xargs -r kill -9
		if [[ ! -z "$last_run_sitl_env"  ]]
		then
			ps -eawf | grep "$last_run_sitl_env" | grep -v grep | awk '{print $2}' | xargs -r kill -9
		fi
		echo "Done Killing SITL processes"
	fi

elif [[ "$1" == "down" ]]
then
	docker stop ros_container skynet_container sitl_container vision_tools_container bfx_container


elif [[ "$1" == "ps" ]]
then
	docker ps
fi
