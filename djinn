#!/bin/bash

config_file=$NRT_WS/.djinn_config
export $(grep -v '^#' $config_file | xargs)
# Refer to the following link for information about state management in bash using a statefile
# https://stackoverflow.com/questions/63084354/how-to-store-state-between-two-consecutive-runs-of-a-bash-script
statefile="/tmp/djinn_state"
last_run_sitl_env=""
xhost +
echo "WORKSPACE PATH: $NRT_WS"
echo "DJINN MODE: $DJINN_MODE"

save_state () {
  typeset -p "$@" >"$statefile"
}

# Source the statefile to restore state
. "$statefile" 2>/dev/null || :

# Set save_state call on script exit to automatically persist state
# To be enabled later when multiple states are required
# trap 'save_state last_run_sitl_env' EXIT

iexec(){
            time docker container exec -it "$1" /bin/bash -l -c "$2"
        }

iexec_ros(){
			time docker container exec -it "$1" /bin/bash -l -c "source /opt/ros/${ROS_VERSION}/setup.bash && $2"
        }

iexec_kalibr(){
			time docker container exec -it "$1" /bin/bash -l -c "source /opt/ros/noetic/setup.bash && source \$WORKSPACE/devel/setup.bash && $2"
        }

cd $NRT_WS

if [[ "$1" == "install" ]]
then
	scripts/install.sh $2 $3 $4


elif [[ "$1" == "setup" ]]
then
	if [[ ! -d ".ssh" ]]
	then
		read -p "Enter email address for github: " email
		read -p "Enter username for dockerhub: " name
		echo "userEmail="$email >> $config_file 
		echo "userName="$name >> $config_file 
		if [[ ! -d "$HOME/.ssh" ]]
		then
			mkdir .ssh 
			cd .ssh
			ssh-keygen -q -t rsa -C "$email" -N "" -f id_rsa <<<y >/dev/null 2>&1
			cd -
		else
			cp -r "$HOME/.ssh" $NRT_WS/.ssh
		fi
	fi
	echo "Github Email: $userEmail"
	echo "Dockerhub ID: $userName"
	if [[ "$2" == "docker" ]]
	then
		platform="linux/amd64,linux/arm/v7"
		mode="base"
		echo "$3"
		if [[ -n "$3" ]]
		then
			echo "============ BUILDING Image ============="
			if [[ "$3" == "nrt" ]]
			then
				echo "============ BUILDING Base Image ============="
				image="$userName/nrt:base"
				filepath="$NRT_WS/docker/base/"
				$NRT_WS/scripts/docker-build.sh $platform $image $filepath 
				echo "============ BUILDING Base AMD64 Image ============="
				image="$userName/nrt:amd64"
				filepath="$NRT_WS/docker/base/amd64"
				platform="linux/amd64"
				$NRT_WS/scripts/docker-build.sh $platform $image $filepath 
				echo "============ BUILDING Base ARMv7 Image ============="
				image="$userName/nrt:armv7"
				filepath="$NRT_WS/docker/base/armv7"
				platform="linux/arm/v7"
				echo "============ BUILDING Base NRT Image ============="
				image="$userName/nrt:dev"
				filepath="$NRT_WS/docker/nrt/"
				platform="linux/amd64,linux/arm/v7"
				$NRT_WS/scripts/docker-build.sh $platform $image $filepath 
			elif [[ "$3" == "kalibr" ]]
			then
				echo "============ BUILDING Kalibr Image ============="
				image="$userName/nrt:kalibr"
				filepath="$NRT_WS/ext/calibration/kalibr/"
				container_name="kalibr_container"
				mode="kalibr"
				$NRT_WS/scripts/docker-build.sh $platform $image $filepath "NRT_WS=$NRT_WS" 
			fi
		else
			echo "============ BUILDING Base Image ============="
			image="$userName/nrt:base"
			filepath="docker/base/"
			$NRT_WS/scripts/docker-build.sh $platform $image $filepath 
		fi
	fi

elif [[ "$1" == "up" ]]
then
	mode="ros"
	echo "username: $userName"
	echo "email: $userEmail"
	git submodule update --init --recursive
	if [[ -n "$2" ]]
	then
		
		if [[ "$2" == "nrt"  ]]
		then
			echo "=============== Initialising NRT Base Container ================"
			$NRT_WS/scripts/start.sh $NRT_WS nrt_container shandilya1998/nrt:base
			iexec_ros nrt_container "ls && echo \"Starting Container Setup\" && /ws/scripts/docker-setup.sh $2 $userEmail $userName" 
			iexec_ros nrt_container "./scripts/build_ros_packages.sh"
		elif [[ "$2" == "kalibr" ]]
		then
			echo "============ Initialising Kalibr Container ============="
			$NRT_WS/scripts/start.sh $NRT_WS kalibr_container shandilya1998/nrt:kalibr
		fi
	else
		$NRT_WS/scripts/start.sh $NRT_WS nrt_container shandilya1998/nrt:ros
		iexec_ros nrt_container "ls && echo \"Starting Container Setup\" && /ws/scripts/docker-setup.sh $2 $userEmail $userName" 
		iexec_ros nrt_container "./scripts/build.sh && ./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
	fi

elif [[ "$1" == "build" ]]
then	
	clear
	if [[ -z "$2" ]]
	then
		echo "=========== BUILDING NRT And related Packages ==========="
		
		iexec_ros nrt_container "./scripts/build.sh && ./scripts/build_ros_packages.sh && cd ros_ws && source install/local_setup.bash && cd .."
	else
		if [[  "$2" == "nrt" ]]
		then
			echo "=========== BUILDING Packages ==========="
			echo $PWD
			iexec_ros nrt_container "./scripts/build_ros_packages.sh"
		fi
	fi

elif [[  "$1" == "exec" ]]
then
	# djinn exec "cd ros_ws/src/ && ros2 pkg create --build-type ament_cmake Sensors" for creating ros2 packages
	# echo "${2}_container"
	if [[ "$2" == "nrt" ]]
	then
		iexec_ros "${2}_container" $3
	else
		iexec "${2}_container" "$3"
	fi

elif [[  "$1" == "start" ]]
then
	# djinn exec "cd ros_ws/src/ && ros2 pkg create --build-type ament_cmake Sensors" for creating ros2 packages
	if [[ "$2" == "airsim" ]]
	then
		if [[ "$3" == "AirSimNH" ]]
		then
			nohup $NRT_WS/envs/AirSimNH/LinuxNoEditor/AirSimNH.sh -renderoffscreen -settings=$NRT_WS/config/settings-no-px4.json > $NRT_WS/airsimnh.log &
		
		elif [[ "$3" == "LandscapeMountain" ]]
		then
			nohup $NRT_WS/envs/LandscapeMountains/LinuxNoEditor/LandscapeMountains.sh -renderoffscreen -settings=$NRT_WS/config/settings-no-px4.json > $NRT_WS/airsimmountain.log &
		elif [[ "$3" == "ZhangJiajie" ]]
		then
			nohup $NRT_WS/envs/ZhangJiajie/LinuxNoEditor/ZhangJiajie.sh -renderoffscreen -settings=$NRT_WS/config/settings-no-px4.json > $NRT_WS/airsimmountain.log &
		elif [[ "$3" == "TrapCam" ]]
		then
			nohup $NRT_WS/envs/TrapCam/LinuxNoEditor/TrapCam.sh -WINDOWED -ResX=640 -ResY=480 -settings=$NRT_WS/config/settings-no-px4.json > $NRT_WS/airsimtrap.log &
		elif [[ "$3" == "Blocks" ]]
		then
			nohup $NRT_WS/envs/LinuxBlocks1.8.1/LinuxNoEditor/Blocks.sh -WINDOWED -ResX=640 -ResY=480 -settings=$NRT_WS/config/settings-no-px4.json > $NRT_WS/airsimblocks.log &
		elif [[ "$3" == "Africa" ]]
		then
			echo "Starting Africa"
			nohup $NRT_WS/envs/Africa_Savannah/LinuxNoEditor/Africa_001.sh  -WINDOWED -ResX=640 -ResY=480 -settings=$NRT_WS/config/settings-africa.json > $NRT_WS/airsimafrica.log &
		fi
		sleep 5
		last_run_sitl_env="$3"
		
		save_state last_run_sitl_env
		if [[ "$DJINN_MODE" == "automation" ]]
		then
			iexec_ros nrt_container "cd ros_ws/ && source install/setup.bash && nohup ros2 run airsim_lib talker > /ws/airsim_survey_lib.log &"
			save_state last_run_sitl_env
		else
			iexec_ros nrt_container "cd ros_ws/ && source install/setup.bash && ros2 run airsim_lib talker"
			ps -ef | grep $last_run_sitl_env | grep -v grep | awk '{print $2}' | xargs -r kill -9
			last_run_sitl_env=""
			save_state last_run_sitl_env
		fi

	elif [[ "$2" == "sensors" ]]
	then
		launch_file="sensors_launch.py"
		if [[ -n "$3" ]]
		then
			iexec_ros nrt_container "cd ros_ws && source install/setup.bash && ros2 launch sensors ${3}_launch.py"
		else
			iexec_ros nrt_container "cd ros_ws && source install/setup.bash && ros2 launch sensors sensors_launch.py"
		fi
	elif [[ "$2" == "calibration" ]]
	then
		echo "Starting Calibration Process"
		iexec_kalibr kalibr_contaienr "cd /ws/ros_ws/kalibr_data/ && ln -s synced/infrared cam0"
		iexec_kalibr kalibr_container "cd /ws/ros_ws/kalibr_data/ && ln -s synced/thermal cam1"
		iexec_kalibr kalibr_container "cd /ws/ros_ws/kalibr_data/ && rosrun kalibr kalibr_bagcreater --folder ./ --output-bag nrt.bag"
		iexec_kalibr kalibr_container "cd /ws/ros_ws/kalibr_data/ && rosrun kalibr kalibr_calibrate_cameras --bag nrt.bag --topics /cam0/image_raw /cam1/image_raw --models pinhole-radtan pinhole-radtan --target april_6x6.yaml"
	elif [[ "$2" == "sitl" ]]
	then
		# echo "========== Starting UP QGC =========="	
		# nohup $HOME/shreyas/QGroundControl.AppImage > $HOME/shreyas/qgc.log &
		sleep 5
		echo "========== Starting AIRSIM =========="
		if [[ "$3" == "AirSimNH" ]]
		then
			nohup $NRT_WS/envs/AirSimNH/LinuxNoEditor/AirSimNH.sh -renderoffscreen -settings=$NRT_WS/config/settings.json > $NRT_WS/airsimnh.log &
		elif [[ "$3" == "LandscapeMountain" ]]
		then
			nohup $NRT_WS/envs/LandscapeMountains/LinuxNoEditor/LandscapeMountains.sh -WINDOWED -ResX=640 -ResY=480 -settings=$NRT_WS/config/settings.json > $NRT_WS/airsimmountain.log &
		elif [[ "$3" == "ZhangJiajie" ]]
		then
			nohup $NRT_WS/envs/ZhangJiajie/LinuxNoEditor/ZhangJiajie.sh -WINDOWED -ResX=640 -ResY=480 -settings=$NRT_WS/config/settings.json > $NRT_WS/airsimzhang.log &
		elif [[ "$3" == "TrapCam" ]]
		then
			nohup $NRT_WS/envs/TrapCam/LinuxNoEditor/TrapCam.sh -WINDOWED -ResX=640 -ResY=480 -settings=$NRT_WS/config/settings-trap.json > $NRT_WS/airsimtrap.log &
		elif [[ "$3" == "Blocks" ]]
		then
			nohup $NRT_WS/envs/LinuxBlocks1.8.1/LinuxNoEditor/Blocks.sh -renderoffscreen -settings=$NRT_WS/config/settings.json > $NRT_WS/airsimblocks.log &
		elif [[ "$3" == "Africa" ]]
		then
			nohup $NRT_WS/envs/Africa_Savannah/LinuxNoEditor/Africa_001.sh -WINDOWED -ResX=640 -ResY=480  -settings=$NRT_WS/config/settings-africa.json >> $NRT_WS/airsimafrica.log &
		fi
		last_run_sitl_env="$3"
		save_state last_run_sitl_env
		# TODO Need to figure out softwares for simulation mention of BFX 
		# Since we are working with both land robots and drones to test our algorithms it is important to have simulation environments for the same
		# Different simulatin environments will be needed for each use case that is served
		if [[ "$DJINN_MODE" == "automation" ]]
		then
			save_state last_run_sitl_env
		else
			last_run_sitl_env=""
			save_state last_run_sitl_env
		fi
	fi

elif [[ $1 == "kill" ]]
then
	echo "Killing running proceses"
	if [[ "$2" == "sitl" ]]
	then
		echo "Killing SITL processes"
		iexec sitl_container "ps -eawf | grep NRT | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
		# ps -ef | grep QGroundControl | grep -v grep | awk '{print $2}' | xargs -r kill -9
		if [[ ! -z "$last_run_sitl_env"  ]]
		then
			ps -eawf | grep "$last_run_sitl_env" | grep -v grep | awk '{print $2}' | xargs -r kill -9
		fi
		echo "Done Killing SITL processes"
	elif [[ $2 == "airsim" ]]
	then
		if [[ ! -z "$last_run_sitl_env"  ]]
		then
			ps -eawf | grep "$last_run_sitl_env" | grep -v grep | awk '{print $2}' | xargs -r kill -9
		fi
		iexec nrt_container "ps -eawf | grep airsim_lib | grep -v grep | awk '{print \$2}' | xargs -r kill -9"
	elif [[ "$2" == "gqc" ]]
	then
		ps -ef | grep QGroundControl | grep -v grep | awk '{print $2}' | xargs -r kill -9
	fi

elif [[ "$1" == "down" ]]
then
	if [[ -n "$2" ]]
	then
		docker stop "${2}_container"
	else
		docker stop base_container nrt_container sitl_container vision_tools_container bfx_container
	fi

elif [[ "$1" == "rmi" ]]
then
	if [[ -n "$2" ]]
	then
		if [[ "$2" == "all" ]]
		then
			docker images | grep -v grep |  tail -n +2 |  awk '{print $3}'  | xargs -r docker rmi -f
		else
			docker rmi -f "$2"
		fi
	fi

elif [[ "$1" == "ps" ]]
then
	docker ps

fi
